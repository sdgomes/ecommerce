@model ProdutoView

@{
    ViewBreadcrumbs breadcrumbs = new();
    breadcrumbs.Title = "Produto";
    breadcrumbs.Breadcrumbs = new BreadcrumbsDTO[]{
new BreadcrumbsDTO("In√≠cio", "/", "fa-solid fa-house"),
new BreadcrumbsDTO("Produtos", "../"),
new BreadcrumbsDTO("Detalhes")
};

    ViewData["Title"] = breadcrumbs.Title;
}

@(await Component.InvokeAsync<BreadcrumbsViewComponent>(breadcrumbs))

<section class="item-details section">
    <div class="container mx-auto sm:px-4">
        <div class="top-area">
            <div class="flex flex-wrap  items-center">

                <div class="lg:w-1/2 px-4 md:w-full w-full">
                    <div class="product-images">
                        <main id="gallery">
                            <div class="main-img">
                                <img src='@Model.Imagens.Where((Item) => (Item.NomeImagem == "COVER")).FirstOrDefault().ImageSource'
                                     id="current" alt="...">
                            </div>

                            <div class="images">
                                @foreach (var Imagem in Model.Imagens.Where((Item) => (Item.NomeImagem != "COVER")))
                                {
                                    <img src="@Imagem.ImageSource" class="img" alt="...">
                                }
                            </div>
                        </main>
                    </div>
                </div>

                <div class="lg:w-1/2 px-4 md:w-full w-full">
                    <div class="product-info relative">
                        <span class="shop">
                            @if (Model.Produto.Tipo != "")
                            {
                                <span class="new-tag">@Model.Produto.Tipo.Capitalize()</span>
                            }

                            @if (Model.Produto.Desconto)
                            {
                                <span class="sale-tag">-@Model.Produto.QntDesconto%</span>
                            }
                        </span>

                        <h2 class="title">@Model.Produto.Nome.Capitalize()</h2>
                        <p class="category">
                            @Model.Produto.Subcategoria.Capitalize(), @Model.Produto.TipoProduto.Capitalize(),
                            @Model.Produto.Cor.Capitalize(), @Model.Produto.Marca.Capitalize()
                        </p>
                        <div>Disponivel: @Model.Produto.Saldo</div>

                        <h3 class="price">
                            @if (Model.Produto.Desconto)
                            {
                                @Model.Produto.CalculoDesconto.ToString("C")
                                <span class="discount-price">@Model.Produto.Preco.ToString("C")</span>
                            }
                            else
                            {
                                @Model.Produto.Preco.ToString("C")
                            }
                        </h3>

                        <div class="single-product !px-0 !py-0 !bg-transparent !border-0 !shadow-none">
                            <div class="product-info !px-0 !py-0 !bg-transparent">
                                <ul class="review">
                                    @for (var i = 1; i < 5; i++)
                                    {
                                        if (i <= Model.Produto.Nota)
                                        {
                                            <li>
                                                <i class="fa-solid fa-star"></i>
                                            </li>
                                        }
                                        else
                                        {
                                            <li><i class="fa-light fa-star"></i></li>
                                        }
                                    }
                                    <li><span>@Model.Produto.QntAvaliacoes Review(s)</span></li>
                                </ul>
                            </div>
                        </div>

                        <p class="info-text">
                            @Model.Produto.Descricao
                        </p>

                        <div class="flex flex-wrap">

                            <div class="lg:w-1/3 md:w-1/3 w-full">
                                <div class="mb-4 quantity text-center">
                                    <label for="color">Quantidade</label>
                                    <div class="count-input flex">
                                        <button class="button-qnt" data-single="true" data-operador="menos">
                                            <i class="fa-solid fa-minus"></i>
                                        </button>
                                        <input autocomplete="off" type="text" value="1" data-mask="0#"
                                               class="input-qnt" />
                                        <button class="button-qnt" data-single="true" data-operador="mais">
                                            <i class="fa-solid fa-plus"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="bottom-content">
                        <div class="flex flex-wrap gap-3">
                            <div class="button cart-button">
                                <a asp-action="Index" asp-controller="Checkout"
                                   asp-route-id-produto="@Model.Produto.IdProduto"
                                   class="btn !flex !text-gray-800 hover:!text-white !w-fit">Comprar</a>
                            </div>
                            <div class="button cart-button">
                                <a data-action="carrinho"
                                   data-tipo-produto="@Model.Produto.TipoProduto.Capitalize()"
                                   data-subcategoria="@Model.Produto.Subcategoria.Capitalize()"
                                   data-imagem='@Model.Imagens.Where((Item) => (Item.NomeImagem == "COVER")).FirstOrDefault().ImageSource'
                                   data-preco="@Model.Produto.Preco"
                                   data-desconto="@(Model.Produto.Desconto ? @Model.Produto.CalculoDesconto : 0)"
                                   data-nome="@Model.Produto.Nome.Capitalize()"
                                   data-qnt-compra="1"
                                   data-id-produto="@Model.Produto.IdProduto"
                                   class="btn !flex !text-gray-800 hover:!text-white !w-fit">
                                    <i class="fa-solid fa-cart-shopping"></i> Carrinho
                                </a>
                            </div>
                            <div class="wish-button">
                                <a data-action="favoritos" data-favorito="false"
                                   data-id-produto="@Model.Produto.IdProduto"
                                   class="btn !flex !text-gray-800 !w-fit !rounded-[3px] hover:!text-gray-800">
                                    <i class="fa-solid fa-heart"></i>
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @(await Component.InvokeAsync<ProductListViewComponent>())
    @(await Component.InvokeAsync<KeepShoppingViewComponent>())
    @(await Component.InvokeAsync<KeepShoppingInfoViewComponent>())

</section>


@section Scripts {
    <script type="text/javascript">

    </script>
}