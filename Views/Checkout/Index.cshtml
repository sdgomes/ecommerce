@model ClientDTO

@{
    ViewBreadcrumbs breadcrumbs = new();
    breadcrumbs.Title = "Checkout";
    breadcrumbs.Breadcrumbs = new BreadcrumbsDTO[]{
new BreadcrumbsDTO("Início", "/", "fa-solid fa-house"),
new BreadcrumbsDTO("Produtos", "./shop"),
new BreadcrumbsDTO("Checkout")
};

    ViewData["Title"] = breadcrumbs.Title;
}

@section Styles {
    <style>
        #form-adiciona-cartao > div > div:nth-child(6),
        #form-adiciona-endereco > div.flex.flex-wrap {
            display: none
        }
    </style>
}

@(await Component.InvokeAsync<BreadcrumbsViewComponent>(breadcrumbs))

<input type="hidden" value="@Model.Client.IdCliente" name="idCliente">
<input type="hidden" value="@Model.Client.Codigo" name="codigo">

<section class="checkout-wrapper section">

    <div class="container mx-auto sm:px-4 mb-10">

        <div class="mx-4">
            <div class="card w-full bg-base-100 rounded border">
                <div class="card-body py-3 px-3">
                    <h2 class="card-title !text-base">Produtos</h2>

                    <div>
                        @if (Model.Products == null)
                        {
                            <div role="alert" class="alert rounded-none">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="stroke-info shrink-0 w-6 h-6"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
                                <span>Nenhum item foi adicionado ao carrinho.</span>
                            </div>
                        }
                        else
                        {
                            <table class="table table-zebra border">
                                <thead>
                                    <tr class="bg-purple-200">
                                        <th>Item</th>
                                        <th>Nome do Produto</th>
                                        <th>Quantidade</th>
                                        <th>Subtotal</th>
                                        <th>Desconto</th>
                                        <th>Remover</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var Item in Model.Products)
                                    {

                                        <tr>
                                            <td>
                                                <a asp-action="Index"
                                                   asp-controller="ShopSingle"
                                                   asp-route-categoria="@Item.TipoProduto.ToLower()"
                                                   asp-route-subcategoria="@Item.Subcategoria.ToLower()"
                                                   asp-route-idproduto="@Item.IdProduto">
                                                    <img src="@Item.ImageSource" class="w-14" alt="...">
                                                </a>
                                            </td>
                                            <td>
                                                <h5 class="product-name">
                                                    <a asp-action="Index"
                                                       asp-controller="ShopSingle"
                                                       asp-route-categoria="@Item.TipoProduto.ToLower()"
                                                       asp-route-subcategoria="@Item.Subcategoria.ToLower()"
                                                       asp-route-idproduto="@Item.IdProduto">
                                                        @Item.Nome
                                                    </a>
                                                </h5>
                                                <p class="product-des">
                                                    <span>@Item.Subcategoria.Capitalize(), @Item.TipoProduto.Capitalize(), @Item.Cor.Capitalize(), @Item.Marca.Capitalize()</span>
                                                    <span><em>Cor:</em> @Item.Cor.Capitalize()</span>
                                                </p>
                                            </td>
                                            <td>
                                                <div class="count-input flex">
                                                    <button class="button-qnt" data-id-produto="@Item.IdProduto" data-operador="menos"><i class="fa-solid fa-minus"></i></button>
                                                    <input autocomplete="off" type="text" value="@Item.QntCompra"
                                                           class="input-qnt !w-[65px] !mx-2" />
                                                    <button class="button-qnt" data-id-produto="@Item.IdProduto" data-operador="mais"><i class="fa-solid fa-plus"></i></button>
                                                </div>
                                            </td>
                                            <td>
                                                <p preco-unitario="@Item.IdProduto">@((Item.QntCompra * Item.Preco).ToString("C"))</p>
                                            </td>
                                            <td>
                                                @if (Item.Desconto)
                                                {
                                                    @Item.CalculoDesconto.ToString("C")
                                                }
                                                else
                                                {
                                                    <span>-</span>
                                                }
                                            </td>
                                            <td>
                                                <a data-id-produto="@Item.IdProduto" class="remove-item-carrinho btn btn-error btn-sm btn-square text-white"><i class="fa-light fa-xmark"></i></a>
                                            </td>
                                        </tr>

                                    }
                                </tbody>
                            </table>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="container mx-auto sm:px-4">
        <div class="flex flex-wrap  justify-center">
            <div class="lg:w-2/3 px-4">
                <div class="checkout-steps-form-style-1">
                    <div class="join join-vertical w-full space-y-5">

                        <div class="collapse collapse-arrow join-item border border-base-300 !rounded-[3px]">
                            <input readonly autocomplete="off" type="radio" name="my-accordion-1" checked />
                            <div class="collapse-title font-bold !bg-white !text-gray-800 border-b after:!content-[none]">
                                Informações pessoais
                            </div>
                            <div class="collapse-content bg-white">
                                <div class="flex flex-wrap ">
                                    <div class="md:w-2/3 px-4">
                                        <div class="single-form form-default">
                                            <label>Nome</label>
                                            <div class="form-input form">
                                                <input readonly autocomplete="off" type="text"
                                                       value="@Model.Client.Nome.Capitalize() @Model.Client.Sobrenome.Capitalize()">
                                            </div>
                                        </div>
                                    </div>

                                    <div class="md:w-1/3 px-4">
                                        <div class="single-form form-default">
                                            <label>RG</label>
                                            <div class="form-input form">
                                                <input readonly autocomplete="off" type="text"
                                                       value="**.***.@Model.Client.RG.Split('.')[2]">
                                            </div>
                                        </div>
                                    </div>

                                    <div class="md:w-1/3 px-4">
                                        <div class="single-form form-default">
                                            <label>CPF</label>
                                            <div class="form-input form">
                                                <input readonly autocomplete="off" type="text"
                                                       value="***.***.@Model.Client.CPF.Split('.')[2]">
                                            </div>
                                        </div>
                                    </div>

                                    <div class="md:w-1/3 px-4">
                                        <div class="single-form form-default">
                                            <label>Celular</label>
                                            <div class="form-input form">
                                                <input readonly autocomplete="off" type="text"
                                                       value="@Model.Client.Celular">
                                            </div>
                                        </div>
                                    </div>

                                    <div class="md:w-1/3 px-4">
                                        <div class="single-form form-default">
                                            <label>Telefone (fixo)</label>
                                            <div class="form-input form">
                                                <input readonly autocomplete="off" type="text"
                                                       value="@Model.Client.Telefone">
                                            </div>
                                        </div>
                                    </div>

                                    <div class="md:w-1/3 px-4">
                                        <div class="single-form form-default">
                                            <label>Gênero</label>
                                            <div class="form-input form">
                                                <input readonly autocomplete="off" type="text"
                                                       value='@Model.Client.Genero.Replace("_", " ").Capitalize()'>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="md:w-1/3 px-4">
                                        <div class="single-form form-default">
                                            <label>Data nascimento</label>
                                            <div class="form-input form">
                                                <input readonly autocomplete="off" type="text"
                                                       value='@Model.Client.DataNascimento.ToString("dd/MM/yyyyy")'>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="collapse collapse-arrow join-item border border-base-300 !rounded-[3px]">
                            <input readonly autocomplete="off" type="radio" name="my-accordion-2" checked />
                            <div class="collapse-title font-bold !bg-white !text-gray-800 border-b after:!content-[none]">
                                <span>Endereço para envio</span>
                            </div>
                            <button id="novo-endereco" data-id-cliente="@Model.Client.IdCliente"
                                    class="text-white btn btn-sm bg-purple-700 hover:bg-purple-800 absolute top-4 right-4 z-10">
                                Novo Endereço
                            </button>
                            <div class="collapse-content bg-white">

                                <div class="flex flex-wrap -mx-3" id="container-enderecos">
                                    @(await Component.InvokeAsync<EnderecoCompraViewComponent>(Model.Adresses))
                                </div>
                            </div>
                        </div>

                        <div class="collapse collapse-arrow join-item border border-base-300 !rounded-[3px]">
                            <input readonly autocomplete="off" type="radio" name="my-accordion-3" checked />
                            <div class="collapse-title font-bold !bg-white !text-gray-800 border-b after:!content-[none]">
                                <span>Forma de pagamento</span>
                            </div>
                            <button id="novo-pagamento" data-id-cliente="@Model.Client.IdCliente"
                                    class="text-white btn btn-sm bg-yellow-700 hover:bg-yellow-800 absolute top-4 right-4 z-10">
                                Adicionar Cartão
                            </button>
                            <div id="pagamentos" class="collapse-content bg-white">

                                <div class="flex flex-wrap -mx-3 gap-5" id="container-cartoes">
                                    @(await Component.InvokeAsync<CartoesViewComponent>(new { IdCliente =
                                            Model.Client.IdCliente}))
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="lg:w-1/3 px-4">
                <div class="checkout-sidebar">
                    <div class="checkout-sidebar-coupon">
                        <p>Aplique o cupom para obter desconto!</p>
                        <form>
                            <div class="single-form form-default">
                                <div class="form-input form">
                                    <input autocomplete="off" type="text" placeholder="Código do cupom">
                                </div>
                                <div class="button">
                                    <button type="button" data-action='desconto'
                                            class="btn !w-fit !flex !text-gray-800 hover:!text-white min-h-0">
                                        Aplicar
                                    </button>
                                </div>
                            </div>
                        </form>
                    </div>

                    <div class="checkout-sidebar-coupon mt-5">
                        <p>Informe seu CEP para o cálculo do frete!</p>
                        <form>
                            <div class="single-form form-default">
                                <div class="form-input form">
                                    <input calculo-frete autocomplete="off" type="text" placeholder="Insira seu CEP"
                                           data-mask="00000-000">
                                </div>
                                <div class="button">
                                    <button type="button" data-action='frete'
                                            class="btn !w-fit !flex !text-gray-800 hover:!text-white min-h-0">
                                        Cálcular
                                        frete
                                    </button>
                                </div>
                            </div>
                        </form>
                    </div>

                    <div class="checkout-sidebar-price-table mt-30">
                        <h5 class="title">Tabela de preços</h5>

                        <div class="sub-total-price">
                            <div class="total-price">
                                <p class="value">Subtotal do carrinho:</p>
                                <p class="price" menu-total-amount>R$ 0,00</p>
                            </div>
                            <div class="total-price shipping">
                                <p class="value">Frete:</p>
                                <p class="price" valor-frete>R$ 0,00</p>
                            </div>
                            <div class="total-price discount">
                                <p class="value">Descontos:</p>
                                <p class="price" total-descontos>R$ 0,00</p>
                            </div>
                        </div>

                        <div class="total-payable">
                            <div class="payable-price">
                                <p class="value">Total a pagar:</p>
                                <p class="price" total-compra>R$ 0,00</p>
                            </div>
                        </div>
                        <div class="price-table-btn button">
                            <a comprar
                               class="btn !bg-[#130235] !text-white !flex !itens-center hover:!bg-[#372853] hover:!text-gray-800 btn-alt">Comprar</a>
                        </div>
                    </div>
                    <div class="checkout-sidebar-banner mt-30">
                        <a asp-action="Index" asp-controller="Shop">
                            <img src="~/img/images/banner/banner.jpg" alt="...">
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>


@section Scripts {
    <script type="text/javascript">

        $(document).on('click', '.viacep', function () {
            $button = $(this);
            $button.disabled().html('<span class="loading loading-spinner loading-sm"></span>');

            fetch(`https://viacep.com.br/ws/${$button.parent('.form-input').find('input').val()}/json/`)
                .then(response => {
                    return response.json();
                })
                .then(data => {
                    const conteudo = {
                        cep: data.cep,
                        logradouro: data.logradouro,
                        complemento: data.complemento,
                        bairro: data.bairro,
                        cidade: data.localidade,
                        estado: data.uf,
                        pais: "Brasil",
                    }

                    populate($button.parents(".address-capsule"), conteudo);

                }).catch(error => {
                    console.error(error);
                }).finally(function () {
                    $button.enabled().html('<i class="fa-regular fa-magnifying-glass"></i>');
                });
        });

        const validation = () => {
            var valid = true;
            $(".swal2-html-container form").find('[required]').each(function (index, element) {
                if (element.value.trim() == "") {
                    valid = false;
                    $(element).addClass("!border-red-600")
                    $(element).parents('[data-tip]').addClass("tooltip-open").removeClass('before:!hidden after:!hidden');
                }

                if ($(element).attr("data-mask"))
                    if (element.value.trim().length < $(element).attr("data-mask").length)
                        if ($(element).attr("data-mask").length != 4) {
                            valid = false;
                            $(element).addClass("!border-red-600")
                            $(element).parents('[data-tip]').addClass("tooltip-open").removeClass('before:!hidden after:!hidden');
                        }
            });

            return valid;
        }

        $(document).on('click', '#novo-pagamento', function () {
            $button = $(this);
            const data = $button.getData();

            Swal.fire({
                title: "Aguarde",
                allowOutsideClick: false,
                allowEscapeKey: false,
                allowEnterKey: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });

            $.ajax({
                type: "POST",
                data: { Index: 1 },
                url: "/componente/client/adiciona/cartao",
                success: function (response) {
                    Swal.fire({
                        html: `<div class="checkout-steps-form-style-1" style="width: 500px; margin: auto;">
                                                            <form id="form-adiciona-cartao" class="text-start">
                                                                <input type="hidden" name="card[1].idCliente" value="${data.idCliente}">
                                                                ${response}
                                                            </form>
                                                           </div>`,
                        width: 575,
                        showCancelButton: true,
                        reverseButtons: true,
                        title: "Adiciona novo cartão.",
                        customClass: {
                            htmlContainer: '!overflow-hidden',
                            confirmButton: "!bg-[#ffcc00] !text-gray-800",
                        },
                        confirmButtonText: 'Cadastrar',
                        cancelButtonText: 'Cancelar',
                        allowEnterKey: false,
                        allowOutsideClick: false,
                        didOpen: () => {
                            Swal.hideLoading();
                        },
                        showLoaderOnConfirm: true,
                        preConfirm: async () => {
                            if (!validation())
                                return Swal.showValidationMessage(`Todos os campos em vermelho precisam ser preenchidos.`);

                            const form = $(".swal2-html-container").find('form').serializeJson();
                            var Cartao = {};

                            for (const key in form) {
                                if (Object.hasOwnProperty.call(form, key)) {
                                    const value = form[key];
                                    var chaves = key.split('.');
                                    Cartao[chaves[1]] = value;
                                }
                            }

                            Cartao.Principal = form.mainCard == undefined ? false : true;

                            const response = await $.ajax({
                                url: '/cadastrar/novo/cartao',
                                type: 'POST',
                                data: { card: Cartao }
                            });

                            return response;
                        },
                    }).then((result) => {
                        if (result.isConfirmed) {
                            Swal.fire({
                                icon: 'success',
                                title: "Cartão adicionado",
                                showConfirmButton: false,
                                customClass: {
                                    confirmButton: "!bg-[#ffcc00] !text-gray-800",
                                },
                                timer: 1500,
                                didOpen: () => {
                                    Swal.hideLoading();
                                }
                            }).then(() => {
                                $.ajax({
                                    type: "POST",
                                    data: {
                                        IdCliente: data.idCliente
                                    },
                                    url: "/componente/client/cartoes",
                                    success: function (response) {
                                        $("#container-cartoes").html(response)
                                    },
                                    error: function (response) {
                                        console.log(response);
                                    },
                                });
                            })
                        }
                    })
                },
                error: function (response) {
                    console.log(response);
                },
            });
        })

        $(document).on('click', '#novo-endereco', function () {
            $button = $(this);
            const data = $button.getData();

            Swal.fire({
                title: "Aguarde",
                allowOutsideClick: false,
                allowEscapeKey: false,
                allowEnterKey: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });

            $.ajax({
                type: "POST",
                data: { Index: 0 },
                url: "/componente/client/adiciona/endereco",
                success: function (response) {
                    Swal.fire({
                        html: `<div class="checkout-steps-form-style-1">
                                                                                            <form id="form-adiciona-endereco" class="text-start">
                                                                                                <input type="hidden" name="adresses[0].idCliente" value="${data.idCliente}">
                                                                                                <div class="flex flex-wrap">
                                                                                                    <div class="px-3">
                                                                                                        <div class="form-control">
                                                                                                            <label class="cursor-pointer label gap-3">
                                                                                                                <input type="checkbox" class="toggle toggle-secondary" name="adresses[0].principal" value="true" />
                                                                                                                <span class="label-text !text-sm">Endereço principal</span>
                                                                                                            </label>
                                                                                                        </div>
                                                                                                    </div>

                                                                                                    <div class="px-3">
                                                                                                        <div class="form-control">
                                                                                                            <label class="cursor-pointer label gap-3">
                                                                                                                <input type="checkbox" class="toggle toggle-secondary" name="adresses[0].cobranca"  value="true" />
                                                                                                                <span class="label-text !text-sm">Endereço de cobrança</span>
                                                                                                            </label>
                                                                                                        </div>
                                                                                                    </div>
                                                                                                </div>

                                                                                                ${response}
                                                                                            </form>
                                                                                           </div>`,
                        width: 755,
                        showCancelButton: true,
                        reverseButtons: true,
                        title: "Adiciona novo endereço.",
                        customClass: {
                            confirmButton: "!bg-[#ffcc00] !text-gray-800",
                        },
                        confirmButtonText: 'Cadastrar',
                        cancelButtonText: 'Cancelar',
                        allowEnterKey: false,
                        allowOutsideClick: false,
                        didOpen: () => {
                            Swal.hideLoading();
                        },
                        showLoaderOnConfirm: true,
                        preConfirm: async () => {
                            if (!validation())
                                return Swal.showValidationMessage(`Todos os campos em vermelho precisam ser preenchidos.`);

                            const form = $(".swal2-html-container").find('form').serializeJson();
                            var Address = {};

                            for (const key in form) {
                                if (Object.hasOwnProperty.call(form, key)) {
                                    const value = form[key];
                                    var chaves = key.split('.');
                                    Address[chaves[1]] = value;
                                }
                            }

                            const response = await $.ajax({
                                url: '/cadastrar/novo/endereco',
                                type: 'POST',
                                data: { address: Address }
                            });

                            return response;
                        },
                    }).then((result) => {
                        if (result.isConfirmed) {
                            Swal.fire({
                                icon: 'success',
                                title: "Endereço adicionado",
                                showConfirmButton: false,
                                customClass: {
                                    confirmButton: "!bg-[#ffcc00] !text-gray-800",
                                },
                                timer: 1500,
                                didOpen: () => {
                                    Swal.hideLoading();
                                }
                            }).then(() => {
                                $.ajax({
                                    type: "POST",
                                    data: {
                                        Enderecos: [result.value.address]
                                    },
                                    url: "/componente/client/lista/endereco",
                                    success: function (response) {
                                        $card = $(response)
                                        $card.find('[name="enderecoEntrega"]').prop("checked", true)
                                        $("#container-enderecos").append($card)

                                    },
                                    error: function (response) {
                                        console.log(response);
                                    },
                                });
                            })
                        }
                    })
                },
                error: function (response) {
                    console.log(response);
                },
            });
        })

        function alerta(cards) {
            return new Promise((resolve, reject) => {
                var htmlCartoes = "";
                cards.forEach(card => {
                    console.log(card);
                    htmlCartoes += `<div class="w-1/2 mb-3 px-3">
                                                                                                        <div class="border rounded-lg p-5 text-start">
                                                                                                            <div class="text-base !text-gray-800 font-bold w-full">
                                                                                                                ${$(`#pagamentos input[value="${card}"]`).parents('.card-body')
                            .find('[data-name="nome-cartao"]').text()}</div>
                                                                                                            <div class="text-sm w-full">Número Cartão</div>
                                                                                                            <div class="text-base w-full font-bold">${$(`input[value="${card}"]`).parent('label').find('.tracking-wider').text().trim()}</div>
                                                                                                            <label class="form-control w-full">
                                                                                                                <div class="label">
                                                                                                                    <span class="label-text-alt">Quantia que será passada nessa cartção?</span>
                                                                                                                </div>
                                                                                                                <input name="${card}" type="text" class="por-cartao input input-bordered w-full" />
                                                                                                            </label>
                                                                                                        </div>
                                                                                                    </div>`
                });

                Swal.fire({
                    title: "Infromações de pagamento.",
                    html: `
                                                                                                <div>
                                                                                                    <h1 id="total-pagar-cartao" class="font-bold text-3xl text-gray-800">R$ <span total-sem-atribuicao>${$('[total-compra]').text().replace(/R\$/g, '').toFloat().toMoney()}</span></h1>
                                                                                                    <p class="w-1/2 mx-auto mb-4 font-bold text-sm">Total da compra sem atribuição. Ao adicionar um valor no cartão selecionado ele será subitraido do valor tatal.</p>
                                                                                                </div>

                                                                                                <div class="mb-3">
                                                                                                    <p>Escolha quais valores serão passados em cada cartão </p>
                                                                                                    <small>Lembre-se o valor minimo a ser paga em pelo menos um dos cartões é de R$ 10,00</small>
                                                                                                </div>

                                                                                                <form class="flex flex-wrap">
                                                                                                    ${htmlCartoes}
                                                                                                </form>`,
                    width: 645,
                    allowOutsideClick: false,
                    allowEscapeKey: false,
                    allowEnterKey: false,
                    showCancelButton: true,
                    confirmButtonText: "Confirmar",
                    cancelButtonText: "Cancelar",
                    reverseButtons: true,
                    customClass: {
                        confirmButton: "!bg-[#ffcc00] !text-gray-800",
                    },
                    didOpen: () => {
                        totalTravado = $('[total-compra]').text().replace(/R\$/g, '').toFloat()
                    },
                    preConfirm: () => {
                        try {
                            var validate = false;
                            var allInput = 0;

                            $(".por-cartao").each(function (index, element) {
                                if ($(element).val() == "") {
                                    Swal.showValidationMessage('Todos os cartões devem ter um valor minimo de R$ 10,00');
                                    validate = true;
                                    return false;
                                }

                                if ($(element).val().toFloat() < 10) {
                                    Swal.showValidationMessage('Todos os cartões devem ter um valor minimo de R$ 10,00');
                                    validate = true;
                                    return false;
                                }

                                allInput += $(element).val().toFloat();
                            });

                            if (validate)
                                return false;

                            allInput = allInput.toTwo()

                            if (allInput > totalTravado) {
                                Swal.showValidationMessage('Os valores informados do pagamento é maior que o valor da compra');
                                validate = true;
                                return;
                            }

                            if (allInput < totalTravado) {
                                Swal.showValidationMessage('Os valores informados do pagamento é menor que o valor da compra');
                                validate = true;
                                return;
                            }

                            if (validate)
                                return false;

                            var retornoCards = []
                            const cardsOBJ = $(".swal2-html-container").find('form').serializeJson();
                            for (const key in cardsOBJ) {
                                if (Object.hasOwnProperty.call(cardsOBJ, key)) {
                                    const value = cardsOBJ[key];
                                    retornoCards.push({
                                        IdCartao: key,
                                        Total: value.toFloat().toMoney()
                                    })
                                }
                            }

                            return retornoCards;
                        } catch (error) {
                            console.log(error);

                            const result = error.responseJSON;
                            Swal.showValidationMessage(`${result.message}`);
                        }
                    }

                }).then((result) => {
                    if (result.isConfirmed)
                        resolve(result.value)
                    else
                        reject(false)
                })
            });
        }

        $(document).ready(function () {
            $('form').keypress(function (e) {
                if ((e.keyCode == 10) || (e.keyCode == 13)) {
                    e.preventDefault();
                }
            });
        });

        document.addEventListener("DOMContentLoaded", function (event) {
            onDomChange(function () {
                setTimeout(() => {
                    $.applyDataMask('[data-mask');

                    $(".por-cartao").maskMoney({
                        decimal: ",",
                        thousands: "."
                    });
                }, 125);
            });
        });

        var totalTravado;

        $(document).on("keyup", ".por-cartao", function (e) {
            const numeros = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
            var total = $('[total-sem-atribuicao]').text().toFloat();
            var allInput = 0;

            $(".por-cartao").each(function (index, element) {
                if ($(element).val() != "")
                    allInput += $(element).val().toFloat();
            });

            allInput = allInput.toTwo()

            $('[total-sem-atribuicao]').html((totalTravado - allInput).toMoney());

            if (totalTravado - allInput < 0)
                $('#total-pagar-cartao').removeClass("text-green-500 text-gray-800").addClass("text-red-500")
            else if (totalTravado - allInput == 0)
                $('#total-pagar-cartao').removeClass("text-gray-800 text-red-500").addClass("text-green-500")
            else
                $('#total-pagar-cartao').removeClass("text-green-500 text-red-500").addClass("text-gray-800")
        });

        $(document).on("click", '[comprar]', async function () {
            if ($('[name="enderecoEntrega"]:checked').length == 0) {
                Swal.fire({
                    icon: 'warning',
                    title: "Atenção!",
                    text: 'Selecione um endereço para entrega.',
                    allowOutsideClick: false,
                    allowEscapeKey: false,
                    allowEnterKey: false,
                    confirmButtonText: "Tentar novamente",
                    reverseButtons: true,
                    customClass: {
                        confirmButton: "!bg-[#ffcc00] !text-gray-800",
                    },
                });
                return false;
            }

            if ($('[name="cartaoPagamento"]:checked').length == 0) {
                Swal.fire({
                    icon: 'warning',
                    title: "Atenção!",
                    text: 'Escolha pelo menos um cartão para efetuar o pagamento.',
                    allowOutsideClick: false,
                    allowEscapeKey: false,
                    allowEnterKey: false,
                    confirmButtonText: "Tentar novamente",
                    reverseButtons: true,
                    customClass: {
                        confirmButton: "!bg-[#ffcc00] !text-gray-800",
                    },
                });

                return false;
            }

            if ($('[calculo-frete]').val() == "") {
                Swal.fire({
                    icon: 'warning',
                    title: "Atenção!",
                    text: 'Informe seu CEP para calculo de frete.',
                    allowOutsideClick: false,
                    allowEscapeKey: false,
                    allowEnterKey: false,
                    confirmButtonText: "Tentar novamente",
                    reverseButtons: true,
                    customClass: {
                        confirmButton: "!bg-[#ffcc00] !text-gray-800",
                    },
                });

                return false;
            }

            if ($('[valor-frete]').text().replace(/R\$/g, '').toFloat() == 0) {
                Swal.fire({
                    icon: 'warning',
                    title: "Atenção!",
                    text: 'Por favor, clique em Calcular frete.',
                    allowOutsideClick: false,
                    allowEscapeKey: false,
                    allowEnterKey: false,
                    confirmButtonText: "Tentar novamente",
                    reverseButtons: true,
                    customClass: {
                        confirmButton: "!bg-[#ffcc00] !text-gray-800",
                    },
                });

                return false;
            }

            var CEPEndereco = $('[name="enderecoEntrega"]:checked').parents('.card-body').find('[data-type="CEP"]').text();
            var calculoCEP = $('[calculo-frete]').val();

            if (CEPEndereco != calculoCEP) {
                Swal.fire({
                    icon: 'warning',
                    title: "Atenção!",
                    text: 'O CEP informado é diferente do que foi selecionado no endereço de entrega.',
                    allowOutsideClick: false,
                    allowEscapeKey: false,
                    allowEnterKey: false,
                    confirmButtonText: "Tentar novamente",
                    reverseButtons: true,
                    customClass: {
                        confirmButton: "!bg-[#ffcc00] !text-gray-800",
                    },
                });

                return false;
            }

            var cartoes = [];
            $('[name="cartaoPagamento"]:checked').each(function (index, element) {
                cartoes.push($(element).val())
            });

            var validation = false;
            var EnviaCartoes = [];

            if (cartoes.length > 1) {
                EnviaCartoes = await alerta(cartoes)

                if (EnviaCartoes == false)
                    return false;
            }
            else
                EnviaCartoes.push({
                    IdCartao: cartoes[0],
                    Total: $('[total-compra]').toFloat()
                })

            if (validation)
                return false;

            var transaction = {
                Produtos: Carrinho.getItems(),
                Cartoes: EnviaCartoes,
                IdEndereco: $('[name="enderecoEntrega"]:checked').val(),
                IdCliente: $('[name="idCliente"]').val(),
                Subtotal: $('[menu-total-amount]').toFloat(),
                Frete: $('[valor-frete]').toFloat(),
                Descontos: $('[total-descontos]').toFloat(),
                Total: $('[total-compra]').toFloat(),
            }

            console.log(transaction.Produtos)

            if (transaction.Produtos.length == 0) {
                Swal.fire({
                    icon: 'warning',
                    title: "Atenção!",
                    text: 'Sua lista de compras está vazia, por favor adicione itens.',
                    allowOutsideClick: false,
                    allowEscapeKey: false,
                    allowEnterKey: false,
                    confirmButtonText: "Tentar novamente",
                    reverseButtons: true,
                    customClass: {
                        confirmButton: "!bg-[#ffcc00] !text-gray-800",
                    },
                });
                return false;
            }

            if (transaction.Produtos.length == 0) {
                Swal.fire({
                    icon: 'warning',
                    title: "Atenção!",
                    text: 'Sua lista de compras está vazia, por favor adicione itens.',
                    allowOutsideClick: false,
                    allowEscapeKey: false,
                    allowEnterKey: false,
                    confirmButtonText: "Tentar novamente",
                    reverseButtons: true,
                    customClass: {
                        confirmButton: "!bg-[#ffcc00] !text-gray-800",
                    },
                });
                return false;
            }

            $.ajax({
                type: "POST",
                url: `/registra/transacao`,
                data: { Transaction: transaction, Codigo: $('[name="codigo"]').val() },
                success: function (data) {
                    localStorage.setItem('transacao', JSON.stringify(data))
                    localStorage.removeItem('produtos-carrinho')
                    localStorage.removeItem('frete')

                    location.href = data.url;
                },
                error: function (response) {
                    console.log(response);
                },
            });

        })

        $(document).on("click", '[data-action="frete"]', function () {
            $button = $(this);
            $input = $button.parents('form').find('input');

            if ($input.val().trim() == "")
                Toast.fire({
                    icon: "error",
                    title: "O campo CEP precisa ser preenchido."
                });
            else {
                $button.html(`<span class="loading loading-spinner loading-sm"></span> Calculando`)

                $.ajax({
                    type: "GET",
                    url: `/calcular/frete/${$input.val()}`,
                    success: function (data) {
                        $button.html(`Cálcular frete`)

                        Toast.fire({
                            icon: data.response.success ? "success" : "error",
                            title: data.response.message
                        });

                        if (data.response.success) {
                            localStorage.setItem("frete", data.response.preco)
                            Carrinho.AtualizaFreCalculos()
                        }
                    },
                    error: function (response) {
                        console.log(response);
                    },
                });
            }
        })

        $(document).on("click", "[data-action='desconto']", function () {
            $button = $(this);
            $input = $button.parents('form').find('input');

            if ($input.val().trim() == "")
                Toast.fire({
                    icon: "error",
                    title: "Informe um código para aplicar o cupom."
                });
            else {
                $button.html(`<span class="loading loading-spinner loading-sm"></span> Calculando`)

                $.ajax({
                    type: "GET",
                    url: `/buscar/desconto/${$input.val()}`,
                    success: function (data) {
                        $button.html(`Aplicar`)

                        Toast.fire({
                            icon: data.response.success ? "success" : "error",
                            title: data.response.message
                        });

                        if (data.response.success) {
                            DescontosMias = data.response.desconto
                            Carrinho.AtualizaFreCalculos()
                        }
                    },
                    error: function (response) {
                        console.log(response);
                    },
                });
            }
        })
    </script>
}