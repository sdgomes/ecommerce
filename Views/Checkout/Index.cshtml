@model ClientDTO

@{
    ViewBreadcrumbs breadcrumbs = new();
    breadcrumbs.Title = "Checkout";
    breadcrumbs.Breadcrumbs = new BreadcrumbsDTO[]{
new BreadcrumbsDTO("Início", "/", "fa-solid fa-house"),
new BreadcrumbsDTO("Produtos", "./shop"),
new BreadcrumbsDTO("Checkout")
};

    ViewData["Title"] = breadcrumbs.Title;
}

@(await Component.InvokeAsync<BreadcrumbsViewComponent>(breadcrumbs))

<input type="hidden" value="@Model.Client.IdCliente" name="idCliente">
<input type="hidden" value="@Model.Client.Codigo" name="codigo">

<section class="checkout-wrapper section">
    <div class="container mx-auto sm:px-4">
        <div class="flex flex-wrap  justify-center">
            <div class="lg:w-2/3 px-4">
                <div class="checkout-steps-form-style-1">
                    <div class="join join-vertical w-full space-y-5">
                        <div class="collapse collapse-arrow join-item border border-base-300 !rounded-[3px]">
                            <input readonly autocomplete="off" type="radio" name="my-accordion-1" checked />
                            <div class="collapse-title font-bold !bg-white !text-gray-800 border-b">
                                Informações pessoais
                            </div>
                            <div class="collapse-content bg-white">
                                <div class="flex flex-wrap ">
                                    <div class="md:w-2/3 px-4">
                                        <div class="single-form form-default">
                                            <label>Nome</label>
                                            <div class="form-input form">
                                                <input readonly autocomplete="off" type="text"
                                                       value="@Model.Client.Nome.Capitalize() @Model.Client.Sobrenome.Capitalize()">
                                            </div>
                                        </div>
                                    </div>

                                    <div class="md:w-1/3 px-4">
                                        <div class="single-form form-default">
                                            <label>RG</label>
                                            <div class="form-input form">
                                                <input readonly autocomplete="off" type="text"
                                                       value="**.***.@Model.Client.RG.Split('.')[2]">
                                            </div>
                                        </div>
                                    </div>

                                    <div class="md:w-1/3 px-4">
                                        <div class="single-form form-default">
                                            <label>CPF</label>
                                            <div class="form-input form">
                                                <input readonly autocomplete="off" type="text"
                                                       value="***.***.@Model.Client.CPF.Split('.')[2]">
                                            </div>
                                        </div>
                                    </div>

                                    <div class="md:w-1/3 px-4">
                                        <div class="single-form form-default">
                                            <label>Celular</label>
                                            <div class="form-input form">
                                                <input readonly autocomplete="off" type="text"
                                                       value="@Model.Client.Celular">
                                            </div>
                                        </div>
                                    </div>

                                    <div class="md:w-1/3 px-4">
                                        <div class="single-form form-default">
                                            <label>Telefone (fixo)</label>
                                            <div class="form-input form">
                                                <input readonly autocomplete="off" type="text"
                                                       value="@Model.Client.Telefone">
                                            </div>
                                        </div>
                                    </div>

                                    <div class="md:w-1/3 px-4">
                                        <div class="single-form form-default">
                                            <label>Gênero</label>
                                            <div class="form-input form">
                                                <input readonly autocomplete="off" type="text"
                                                       value='@Model.Client.Genero.Replace("_", " ").Capitalize()'>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="md:w-1/3 px-4">
                                        <div class="single-form form-default">
                                            <label>Data nascimento</label>
                                            <div class="form-input form">
                                                <input readonly autocomplete="off" type="text"
                                                       value='@Model.Client.DataNascimento.ToString("dd/MM/yyyyy")'>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="collapse collapse-arrow join-item border border-base-300 !rounded-[3px]">
                            <input readonly autocomplete="off" type="radio" name="my-accordion-2" checked />
                            <div class="collapse-title font-bold !bg-white !text-gray-800 border-b">
                                Endereço para envio
                            </div>
                            <div class="collapse-content bg-white">

                                <div class="flex flex-wrap -mx-3">
                                    @foreach (var (address, index) in Model.Adresses.Select((address, index) => (address, index)))
                                    {
                                        <div class="w-1/2 px-3">
                                            <label class="w-full card bg-base-200 rounded">
                                                <div class="card-body px-3 py-3.5">
                                                    <label class="flex items-center gap-2">
                                                        <input class="accent-yellow-400 h-[25px] w-[25px]" type="radio"
                                                               name="enderecoEntrega" value="@address.IdEndereco">
                                                        @address.NomeEndereco
                                                    </label>

                                                    <div class="flex flex-wrap mt-4 px-3">
                                                        <div data-type="CEP" class="text-base w-full">@address.CEP</div>
                                                        <div class="w-full text-gray-800">
                                                            @address.TipoLogradouro.Capitalize(),
                                                            @address.TipoResidencia.Capitalize()
                                                        </div>
                                                        <div class="text-base w-full text-gray-800">
                                                            @address.Logradouro,
                                                            @address.Numero - @address.Bairro, @address.Cidade -
                                                            @address.Estado
                                                        </div>
                                                        <hr>
                                                        <div>@address.Complemento</div>
                                                        <div>@address.Frase</div>
                                                    </div>
                                                </div>
                                            </label>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>

                        <div class="collapse collapse-arrow join-item border border-base-300 !rounded-[3px]">
                            <input readonly autocomplete="off" type="radio" name="my-accordion-3" checked />
                            <div class="collapse-title font-bold !bg-white !text-gray-800 border-b">
                                Forma de pagamento
                            </div>
                            <div id="pagamentos" class="collapse-content bg-white">

                                <div class="flex flex-wrap -mx-3 gap-5">
                                    @(await Component.InvokeAsync<CartoesViewComponent>(new { IdCliente = Model.Client.IdCliente}))
                                    @*  @foreach (var (card, index) in Model.Cards.Select((card, index) => (card, index)))
                                        {
                                        <div class="w-1/2 px-3">
                                            <label class="w-full card bg-base-200 rounded">
                                                <div class="card-body px-3 py-3.5">
                                                    <label class="flex items-center gap-2">
                                                        <input class="accent-yellow-400 h-[25px] w-[25px]"
                                                            type="checkbox" name="cartaoPagamento"
                                                            value="@card.IdCartao">
                                                        Nome titular: @card.NomeTitular.Capitalize()
                                                    </label>

                                                    <div class="flex flex-wrap mt-4 px-3">
                                                        <div class="w-full mb-3">
                                                            <div data-name="nome-cartao"
                                                                class="text-base !text-gray-800 font-bold w-full">
                                                                @card.NomeCartao.Capitalize()
                                                            </div>
                                                        </div>

                                                        <div class="w-1/2">
                                                            <div class="text-sm w-full">Número Cartão</div>
                                                            <div class="text-base w-full" data-name="numero-cartao">
                                                                *** *** ***
                                                                @card.Numero.Split(' ')[3]
                                                            </div>
                                                        </div>

                                                        <div class="w-1/2 text-gray-700">
                                                            <div class="text-sm w-full">Válidade até</div>
                                                            @card.DataValidade.Split("-")[1]/@card.DataValidade.Split("-")[0]
                                                        </div>

                                                        <div class="text-base w-1/2 text-gray-800">
                                                            <div class="text-base w-full">CVV</div>
                                                            ***
                                                        </div>

                                                        <div class="w-1/2">
                                                            <div>@card.NomeBandeira.Capitalize()&ensp;</div>
                                                            <div>
                                                                <img class=""
                                                                    src="~/img/images/payment/@(card.IdBandeira).webp" />
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </label>
                                        </div>
                                        } *@
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="lg:w-1/3 px-4">
                <div class="checkout-sidebar">
                    <div class="checkout-sidebar-coupon">
                        <p>Aplique o cupom para obter desconto!</p>
                        <form>
                            <div class="single-form form-default">
                                <div class="form-input form">
                                    <input autocomplete="off" type="text" placeholder="Código do cupom">
                                </div>
                                <div class="button">
                                    <button type="button" data-action='desconto'
                                            class="btn !w-fit !flex !text-gray-800 hover:!text-white min-h-0">
                                        Aplicar
                                    </button>
                                </div>
                            </div>
                        </form>
                    </div>

                    <div class="checkout-sidebar-coupon mt-5">
                        <p>Informe seu CEP para o cálculo do frete!</p>
                        <form>
                            <div class="single-form form-default">
                                <div class="form-input form">
                                    <input calculo-frete autocomplete="off" type="text" placeholder="Insira seu CEP"
                                           data-mask="00000-000">
                                </div>
                                <div class="button">
                                    <button type="button" data-action='frete'
                                            class="btn !w-fit !flex !text-gray-800 hover:!text-white min-h-0">
                                        Cálcular
                                        frete
                                    </button>
                                </div>
                            </div>
                        </form>
                    </div>

                    <div class="checkout-sidebar-price-table mt-30">
                        <h5 class="title">Tabela de preços</h5>

                        <div class="sub-total-price">
                            <div class="total-price">
                                <p class="value">Subtotal do carrinho:</p>
                                <p class="price" menu-total-amount>R$ 0,00</p>
                            </div>
                            <div class="total-price shipping">
                                <p class="value">Frete:</p>
                                <p class="price" valor-frete>R$ 0,00</p>
                            </div>
                            <div class="total-price discount">
                                <p class="value">Descontos:</p>
                                <p class="price" total-descontos>R$ 0,00</p>
                            </div>
                        </div>

                        <div class="total-payable">
                            <div class="payable-price">
                                <p class="value">Total a pagar:</p>
                                <p class="price" total-compra>R$ 0,00</p>
                            </div>
                        </div>
                        <div class="price-table-btn button">
                            <a comprar
                               class="btn !bg-[#130235] !text-white !flex !itens-center hover:!bg-[#372853] hover:!text-gray-800 btn-alt">Comprar</a>
                        </div>
                    </div>
                    <div class="checkout-sidebar-banner mt-30">
                        <a asp-action="Index" asp-controller="Shop">
                            <img src="~/img/images/banner/banner.jpg" alt="...">
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>


@section Scripts {
    <script type="text/javascript">
        function alerta(cards) {
            return new Promise((resolve, reject) => {
                var htmlCartoes = "";
                cards.forEach(card => {
                    htmlCartoes += `<div class="w-1/2 mb-3 px-3">
                                <div class="border rounded-lg p-5 text-start">
                                    <div class="text-base !text-gray-800 font-bold w-full">
                                        ${$(`#pagamentos input[value="${card}"]`).parents('.card-body')
                            .find('[data-name="nome-cartao"]').text()}</div>
                                    <div class="text-sm w-full">Número Cartão</div>
                                    <div class="text-base w-full">
                                        ${$(`#pagamentos input[value="${card}"]`).parents('.card-body')
                            .find('[data-name="numero-cartao"]').text()}</div>

                                    <label class="form-control w-full mt-3">
                                        <div class="label">
                                            <span class="label-text-alt">Quantia que será passada nessa cartção?</span>
                                        </div>
                                        <input name="${card}" type="text" class="por-cartao input input-bordered w-full" />
                                    </label>
                                </div>
                            </div>`
                });

                Swal.fire({
                    title: "Infromações de pagamento.",
                    html: `
                        <div>
                            <h1 id="total-pagar-cartao" class="font-bold text-3xl text-gray-800">R$ <span total-sem-atribuicao>${$('[total-compra]').text().replace(/R\$/g, '').toFloat().toMoney()}</span></h1>
                            <p class="w-1/2 mx-auto mb-4 font-bold text-sm">Total da compra sem atribuição. Ao adicionar um valor no cartão selecionado ele será subitraido do valor tatal.</p>
                        </div>

                        <div class="mb-3">
                            <p>Escolha quais valores serão passados em cada cartão </p>
                            <small>Lembre-se o valor minimo a ser paga em pelo menos um dos cartões é de R$ 10,00</small>
                        </div>

                        <form class="flex flex-wrap">
                            ${htmlCartoes}
                        </form>`,
                    width: 645,
                    allowOutsideClick: false,
                    allowEscapeKey: false,
                    allowEnterKey: false,
                    showCancelButton: true,
                    confirmButtonText: "Confirmar",
                    cancelButtonText: "Cancelar",
                    reverseButtons: true,
                    customClass: {
                        confirmButton: "!bg-[#ffcc00] !text-gray-800",
                    },
                    didOpen: () => {
                        totalTravado = $('[total-compra]').text().replace(/R\$/g, '').toFloat()
                    },
                    preConfirm: () => {
                        try {
                            var validate = false;
                            var allInput = 0;

                            $(".por-cartao").each(function (index, element) {
                                if ($(element).val() == "") {
                                    Swal.showValidationMessage('Todos os cartões devem ter um valor minimo de R$ 10,00');
                                    validate = true;
                                    return false;
                                }

                                if ($(element).val().toFloat() < 10) {
                                    Swal.showValidationMessage('Todos os cartões devem ter um valor minimo de R$ 10,00');
                                    validate = true;
                                    return false;
                                }

                                allInput += $(element).val().toFloat();
                            });

                            if (validate)
                                return false;

                            allInput = allInput.toTwo()

                            if (allInput > totalTravado) {
                                Swal.showValidationMessage('Os valores informados do pagamento é maior que o valor da compra');
                                validate = true;
                                return;
                            }

                            if (allInput < totalTravado) {
                                Swal.showValidationMessage('Os valores informados do pagamento é menor que o valor da compra');
                                validate = true;
                                return;
                            }

                            if (validate)
                                return false;

                            var retornoCards = []
                            const cardsOBJ = $(".swal2-html-container").find('form').serializeJson();
                            for (const key in cardsOBJ) {
                                if (Object.hasOwnProperty.call(cardsOBJ, key)) {
                                    const value = cardsOBJ[key];
                                    retornoCards.push({
                                        IdCartao: key,
                                        Total: value.toFloat().toMoney()
                                    })
                                }
                            }

                            return retornoCards;
                        } catch (error) {
                            console.log(error);

                            const result = error.responseJSON;
                            Swal.showValidationMessage(`${result.message}`);
                        }
                    }

                }).then((result) => {
                    if (result.isConfirmed)
                        resolve(result.value)
                    else
                        reject(false)
                })
            });
        }

        $(document).ready(function () {
            $('form').keypress(function (e) {
                if ((e.keyCode == 10) || (e.keyCode == 13)) {
                    e.preventDefault();
                }
            });
        });

        document.addEventListener("DOMContentLoaded", function (event) {
            onDomChange(function () {
                setTimeout(() => {
                    $.applyDataMask('[data-mask');

                    $(".por-cartao").maskMoney({
                        decimal: ",",
                        thousands: "."
                    });
                }, 125);
            });
        });

        var totalTravado;

        $(document).on("keyup", ".por-cartao", function (e) {
            const numeros = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
            var total = $('[total-sem-atribuicao]').text().toFloat();
            var allInput = 0;

            $(".por-cartao").each(function (index, element) {
                if ($(element).val() != "")
                    allInput += $(element).val().toFloat();
            });

            allInput = allInput.toTwo()

            $('[total-sem-atribuicao]').html((totalTravado - allInput).toMoney());

            if (totalTravado - allInput < 0)
                $('#total-pagar-cartao').removeClass("text-green-500 text-gray-800").addClass("text-red-500")
            else if (totalTravado - allInput == 0)
                $('#total-pagar-cartao').removeClass("text-gray-800 text-red-500").addClass("text-green-500")
            else
                $('#total-pagar-cartao').removeClass("text-green-500 text-red-500").addClass("text-gray-800")
        });

        $(document).on("click", '[comprar]', async function () {
            if ($('[name="enderecoEntrega"]:checked').length == 0) {
                Swal.fire({
                    icon: 'warning',
                    title: "Atenção!",
                    text: 'Selecione um endereço para entrega.',
                    allowOutsideClick: false,
                    allowEscapeKey: false,
                    allowEnterKey: false,
                    confirmButtonText: "Tentar novamente",
                    reverseButtons: true,
                    customClass: {
                        confirmButton: "!bg-[#ffcc00] !text-gray-800",
                    },
                });
                return false;
            }

            if ($('[name="cartaoPagamento"]:checked').length == 0) {
                Swal.fire({
                    icon: 'warning',
                    title: "Atenção!",
                    text: 'Escolha pelo menos um cartão para efetuar o pagamento.',
                    allowOutsideClick: false,
                    allowEscapeKey: false,
                    allowEnterKey: false,
                    confirmButtonText: "Tentar novamente",
                    reverseButtons: true,
                    customClass: {
                        confirmButton: "!bg-[#ffcc00] !text-gray-800",
                    },
                });

                return false;
            }

            if ($('[calculo-frete]').val() == "") {
                Swal.fire({
                    icon: 'warning',
                    title: "Atenção!",
                    text: 'Informe seu CEP para calculo de frete.',
                    allowOutsideClick: false,
                    allowEscapeKey: false,
                    allowEnterKey: false,
                    confirmButtonText: "Tentar novamente",
                    reverseButtons: true,
                    customClass: {
                        confirmButton: "!bg-[#ffcc00] !text-gray-800",
                    },
                });

                return false;
            }

            if ($('[valor-frete]').text().replace(/R\$/g, '').toFloat() == 0) {
                Swal.fire({
                    icon: 'warning',
                    title: "Atenção!",
                    text: 'Por favor, clique em Calcular frete.',
                    allowOutsideClick: false,
                    allowEscapeKey: false,
                    allowEnterKey: false,
                    confirmButtonText: "Tentar novamente",
                    reverseButtons: true,
                    customClass: {
                        confirmButton: "!bg-[#ffcc00] !text-gray-800",
                    },
                });

                return false;
            }

            var CEPEndereco = $('[name="enderecoEntrega"]:checked').parents('.card-body').find('[data-type="CEP"]').text();
            var calculoCEP = $('[calculo-frete]').val();

            if (CEPEndereco != calculoCEP) {
                Swal.fire({
                    icon: 'warning',
                    title: "Atenção!",
                    text: 'O CEP informado é diferente do que foi selecionado no endereço de entrega.',
                    allowOutsideClick: false,
                    allowEscapeKey: false,
                    allowEnterKey: false,
                    confirmButtonText: "Tentar novamente",
                    reverseButtons: true,
                    customClass: {
                        confirmButton: "!bg-[#ffcc00] !text-gray-800",
                    },
                });

                return false;
            }

            var cartoes = [];
            $('[name="cartaoPagamento"]:checked').each(function (index, element) {
                cartoes.push($(element).val())
            });

            var validation = false;
            var EnviaCartoes = [];

            if (cartoes.length > 1) {
                EnviaCartoes = await alerta(cartoes)

                if (EnviaCartoes == false)
                    return false;
            }
            else
                EnviaCartoes.push({
                    IdCartao: cartoes[0],
                    Total: $('[total-compra]').toFloat()
                })

            if (validation)
                return false;

            var transaction = {
                Produtos: Carrinho.getItems(),
                Cartoes: EnviaCartoes,
                IdEndereco: $('[name="enderecoEntrega"]:checked').val(),
                IdCliente: $('[name="idCliente"]').val(),
                Subtotal: $('[menu-total-amount]').toFloat(),
                Frete: $('[valor-frete]').toFloat(),
                Descontos: $('[total-descontos]').toFloat(),
                Total: $('[total-compra]').toFloat(),
            }

            $.ajax({
                type: "POST",
                url: `/registra/transacao`,
                data: { Transaction: transaction, Codigo: $('[name="codigo"]').val() },
                success: function (data) {
                    localStorage.setItem('transacao', JSON.stringify(data))
                    localStorage.removeItem('produtos-carrinho')
                    localStorage.removeItem('frete')

                    location.href = data.url;
                },
                error: function (response) {
                    console.log(response);
                },
            });

        })

        $(document).on("click", '[data-action="frete"]', function () {
            $button = $(this);
            $input = $button.parents('form').find('input');

            if ($input.val().trim() == "")
                Toast.fire({
                    icon: "error",
                    title: "O campo CEP precisa ser preenchido."
                });
            else {
                $button.html(`<span class="loading loading-spinner loading-sm"></span> Calculando`)

                $.ajax({
                    type: "GET",
                    url: `/calcular/frete/${$input.val()}`,
                    success: function (data) {
                        $button.html(`Cálcular frete`)

                        Toast.fire({
                            icon: data.response.success ? "success" : "error",
                            title: data.response.message
                        });

                        if (data.response.success) {
                            localStorage.setItem("frete", data.response.preco)
                            Carrinho.AtualizaFreCalculos()
                        }
                    },
                    error: function (response) {
                        console.log(response);
                    },
                });
            }
        })

        $(document).on("click", "[data-action='desconto']", function () {
            $button = $(this);
            $input = $button.parents('form').find('input');

            if ($input.val().trim() == "")
                Toast.fire({
                    icon: "error",
                    title: "Informe um código para aplicar o cupom."
                });
            else {
                $button.html(`<span class="loading loading-spinner loading-sm"></span> Calculando`)

                $.ajax({
                    type: "GET",
                    url: `/buscar/desconto/${$input.val()}`,
                    success: function (data) {
                        $button.html(`Aplicar`)

                        Toast.fire({
                            icon: data.response.success ? "success" : "error",
                            title: data.response.message
                        });

                        if (data.response.success) {
                            DescontosMias = data.response.desconto
                            Carrinho.AtualizaFreCalculos()
                        }
                    },
                    error: function (response) {
                        console.log(response);
                    },
                });
            }
        })
    </script>
}